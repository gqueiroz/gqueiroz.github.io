..
    This file is part of "Notas de Aula do Curso Bancos de Dados Geográficos".
    Copyright 2020-2022, Gilberto Queiroz.


.. _cap_json_python:

Leitura e Escrita de Arquivos JSON em Python
============================================


A biblioteca padrão do Python possui um módulo denominado `json <https://docs.python.org/3/library/json.html>`_ que pode ser utilizado para manipulação de documentos JSON. A forma mais simples de trabalhar este formato é através da representação de dicionários do Python, que possui uma mapeamento direto com o tipo ``object`` da notação JSON. Para começar nosso exercício com a manipulação de textos no formato JSON, vamos importar a biblioteca JSON e transformar um dicionário em um documento no formato JSON:


.. code-block:: python
    :linenos:
    :caption: Transformando um dicionário Python em um documento JSON.

    import json

    endereco = {
        'rua': 'Av. dos Astronautas',
        'numero': 1758,
        'bairro': 'Jardim da Granja',
        'cidade': 'São José dos Campos',
        'UF': 'SP',
        'CEP': '12227-010'
    }

    endereco_json = json.dumps(endereco)

    print(endereco_json)


Repare no trecho de programa acima, que o identificador ``endereco_json`` fica associado a uma ``string`` contendo todo o texto do documento JSON equivalente ao dicionário informado na função ``json.dumps``. Esse processo de transformar um objeto Python em um documento texto é conhecido por **serialização**.


De maneira similar, podemos ler um texto representando um documento JSON e transformá-lo em um dicionário Python, através da função ``json.loads``:


.. code-block:: python
    :linenos:
    :caption: Transformando um documento JSON em um dicionário Python.

    import json

    doc = '{"rua": "Av. dos Astronautas", "numero": 1758, \
          "bairro": "Jardim da Granja", \
          "cidade": "S\\u00e3o Jos\\u00e9 dos Campos", \
          "UF": "SP", "CEP": "12227-010"}'

    endereco = json.loads(doc)

    print( endereco['rua'] )
    print( endereco['numero'] )
    print( endereco['cidade'] )


No trecho de código acima podemos observar que após transformar a string contendo o texto do documento JSON (``doc``) em um dicionário Python através da função ``json.loads``, podemos acessar os valores associados às chaves ``rua``, ``numero`` e ``cidade`` no dicionário (``endereco``). Este processo de transformar um documento texto em um objeto Python é chamado de **deserialização**.


Agora vamos ler um documento JSON.


.. literalinclude:: ../data/json/artigo.json
    :emphasize-lines: 31, 34-59
    :caption: Documento JSON com informações sobre uma publicação científica (:download:`artigo.json <../data/json/artigo.json>`).


Podemos ler o arquivo :download:`artigo.json <../data/json/artigo.json>` utilizando a função interna do Python chamada ``open()``, como mostrado abaixo:


.. code-block:: python
    :linenos:
    :caption: Leitura de um documento JSON.

    import json

    with open( 'artigo.json', 'r' ) as arq_json:
        artigo = json.load( arq_json )

        print( artigo['title'] )

        for autor in artigo['author']:
            print( 'Nome: {} {}'.format(autor['given'], autor['family']) )


Repare que após a abertura do arquivo na ``linha 03``, realizamos a leitura dos dados deste arquivo na ``linha 04`` através da função ``json.load()``. Após a transformação do arquivo em um dicionário Python, podemos acessar os campos desse dicionário usando o ``operador []``, recuperando assim o título do artigo e sua lista de autores.


Para gravar um arquivo JSON podemos usar a função ``json.dump`` como mostrado no trecho de código abaixo:


.. code-block:: python
    :linenos:
    :caption: Escrita de um documento JSON.

    import json

    endereco = {
        'rua': 'Av. dos Astronautas',
        'numero': 1758,
        'bairro': 'Jardim da Granja',
        'cidade': 'São José dos Campos',
        'UF': 'SP',
        'CEP': '12227-010'
    }

    with open('endereco.json', 'w') as arq_json:
        json.dump(endereco, arq_json)


Após a execução do trecho de código acima, você deverá ter um arquivo chamado ``endereco.json`` contendo a serialização do dicionário Python ``endereco`` na forma de um arquivo JSON.


.. note::

    As funções ``json.dump`` e ``json.dumps`` aceitam um argumento nomeado, ``indent``, que pode ser usado para controlar a indentação do documento JSON. Na ``linha 14`` do trecho de código acima, poderíamos utilizar um nível de indentação com ``4`` espaços::

        json.dump(endereco, arq_json, indent=4)


.. note::

    Mais detalhes sobre leitura/escrita de arquivos JSON podem ser encontrados em :cite:`psf:stdlib:2021:k`, :cite:`lofaro:2018` e :cite:`mcneel:2021`.

